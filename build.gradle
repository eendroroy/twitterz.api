buildscript {
    ext {
        kotlinVersion = '1.2.71'
        liquibaseVersion = '2.0.1'
        springBootVersion = '2.0.5.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url = 'https://repo.spring.io/snapshot' }
        maven { url = 'https://repo.spring.io/milestone' }
        maven { url = 'https://plugins.gradle.org/m2' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "gradle.plugin.org.liquibase:liquibase-gradle-plugin:${liquibaseVersion}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
        classpath 'com.bmuschko:gradle-cargo-plugin:2.4'
    }
}

plugins {
    id 'com.adarshr.test-logger' version '1.5.0'
    id 'com.bmuschko.cargo' version '2.4'
    id 'idea'
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
    id 'jacoco'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.2.71'
    id 'org.jetbrains.kotlin.jvm' version '1.2.71'
    id 'org.jmailen.kotlinter' version '1.20.0'
    id 'org.liquibase.gradle' version '2.0.1'
    id 'org.springframework.boot' version '2.0.5.RELEASE'
    id 'war'
}

group = 'com.github.eendroroy'
version = '0.0.1-SNAPSHOT'
description = "Twitter for Zombies API."
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url = 'https://repo.spring.io/snapshot' }
    maven { url = 'https://repo.spring.io/milestone' }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

kotlinter {
    ignoreFailures = false
    indentSize = 4
    continuationIndentSize = 2
    reporters = ['checkstyle', 'html', 'json', 'plain']
}

cargo {
    containerId = 'tomcat8x'
    port = 8080

    deployable {
        context = 'twitterz'
    }

    remote {
        hostname = '192.168.33.10'
        username = 'admin'
        password = 'admin'
    }
}

task deleteOutDirectory {
    doLast {
        delete "$projectDir/out"
    }
}

tasks.clean.doFirst {
    delete "$projectDir/out"
}

tasks.cargoDeployRemote.dependsOn(build)
tasks.cargoRedeployRemote.dependsOn(build)

tasks.test.finalizedBy(tasks.jacocoTestReport)

configurations {
    providedRuntime
}

dependencies {
    compile('commons-codec:commons-codec')
    compile('io.jsonwebtoken:jjwt-api:0.10.5')
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    compile('org.liquibase:liquibase-core')
    compile('org.mindrot:jbcrypt:0.4')
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-hateoas')
    compile('org.springframework.boot:spring-boot-starter-web')

    runtime('io.jsonwebtoken:jjwt-impl:0.10.5')
    runtime('io.jsonwebtoken:jjwt-jackson:0.10.5')
    runtime('org.postgresql:postgresql')
    runtime('org.springframework.boot:spring-boot-devtools')

    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')

    testCompile('org.springframework.boot:spring-boot-starter-test')
}
